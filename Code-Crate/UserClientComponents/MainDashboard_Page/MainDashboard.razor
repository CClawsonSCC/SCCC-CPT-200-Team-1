@page "/MainDashboard/{userID:int}"
@using CodeCrateData
@inject UserAccountService _userAccountService
@inject CredentialLogService _credentialLogService
@inject IClipboardService ClipboardService
@inject CredentialLogMessenger _credentialLogMessenger
@inject ActiveLogService _activeLogService
@using Microsoft.AspNetCore.Components.QuickGrid


<div class="container-fluid">
    <div class="row">
        <div>
            <DashboardNavBar _userAccount="@userAccount"/>
        </div>

        <body style="background-color: #F5F5F4; padding: 0px; margin: 0px;">
            <section>
                <div class="container py-5">
                    <div class="fade-in-text">
                        <h2 style="color: black;font-style: oblique">Welcome, @userAccount.Username!</h2>
                    </div>

                    <div class="grid" >
                        <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="@(e =>addEditCredentials(0))"> + New</Button>
                        
                        <QuickGrid Items="FilteredItems" Theme="corporate" Pagination="@pagination" >
                            <PropertyColumn Property="f => f.Application" Title="Application" Sortable="true" />
                            <TemplateColumn Align="Align.Right" >
                                <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="@(e =>copyBtn(context.PassID, 0))"><Icon Name="IconName.Clipboard" /></Button>
                            </TemplateColumn>
                            <PropertyColumn Property="f => f.Username" Title="Username" Sortable="true"/>
                            <TemplateColumn Align="Align.Right" >
                                <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="@(e =>copyBtn(context.PassID, 1))"><Icon Name="IconName.Clipboard" /></Button>
                            </TemplateColumn>
                            <PropertyColumn Property="f => f.Password" Title="Password" Sortable="true" Class="password-log" />
                            
                
                            <TemplateColumn Align="Align.Right">
                                <Button Color="ButtonColor.Primary" Size="Size.Small" Outline="true" @onclick="@(e =>addEditCredentials(context.PassID))"><Icon Name="IconName.Pencil" /></Button>
                                <Button Color="ButtonColor.Primary" Size="Size.Small" Outline="true" @onclick="@(e =>ModalBoxToMessageUserOpen(context.PassID))"><Icon Name="IconName.Trash" /></Button>
                            </TemplateColumn>
                            
                        </QuickGrid>
                    </div>
                    
                    <div class="@testTables">
                            Items per page:
                            <select @bind="@pagination.ItemsPerPage">
                                <option>10</option>
                                <option>15</option>
                                <option>20</option>
                                <option>30</option>
                                <option>50</option>
                            </select>
                    </div>
                    <div style="border-top: 1px solid #3f3d56;">
                        <Paginator Value="@pagination" />
                    </div>    
                        
                   
                </div>
            </section>
        </body>
        
    </div>
   <MainFooter />
</div>

@if (displayAddEditComponent){
    <Code_Crate.UserClientComponents.AddEditPass_Modal.AddEditPass passID="@id" OnComplete="onEditComplete" userID="@userID"/>
}
@if (ModalBoxToMessageUser) {
    <ModalDialogBox Title ="Watch Out!" ListOfTextErrors = "@listOfErrorPrompts" OnClose = "@ModalBoxToMessageUserClose" DialogType="ModalDialogBox.ModalDialogType.DeleteCancel"></ModalDialogBox>
}

@code {
    [Parameter] public int userID { get; set; }
    bool displayAddEditComponent = false;
    private int id { get; set; }
    protected UserAccount userAccount = new();
    protected CredentialLog credLog = new();
    protected List<String> listOfErrorPrompts = new List<String>();
    public bool ModalBoxToMessageUser { get; set; }

    private string testTables = "testTables";
    
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    IEnumerable<CredentialLog> credLogs = Enumerable.Empty<CredentialLog>(); 

    IQueryable<CredentialLog> FilteredItems
    {
        get
        {
            var result = credLogs.AsQueryable();
            return result!;
        }
    } 

    // When the page loads it will do the following service calls to get the data needed.
    protected override async Task OnInitializedAsync() {   
        await _userAccountService.LoadUserAccounts();
        userAccount = await _userAccountService.GetAccountData(userID);
        credLogs = await _credentialLogService.LoadAllUserCredentials(userID);
    }
    
    // This will open the addEdit Component
    private void addEditCredentials(int id) {
        this.id = id;
        displayAddEditComponent = true;
    }

    // This will close the addEdit Component and refresh the table
    private async Task onEditComplete() {
        displayAddEditComponent = false;
        credLogs = await _credentialLogService.LoadAllUserCredentials(userID);
    }

    // This is when the delete modal box cancel or delete button is pressed
    // If the delete button is pressed, then it is accepted and will delete the credential
    private async Task ModalBoxToMessageUserClose(bool accepted) {
        if (accepted) {
            await Task.Delay(1500);
            await _credentialLogService.DeleteCredential(id, userID);
        }
        
        ModalBoxToMessageUser = false;
        credLogs = await _credentialLogService.LoadAllUserCredentials(userID);
    }

    // This will copy the username or password
    private async Task copyBtn(int passID, int typeOfCopy)
    {   
        var currentCredential = await _credentialLogService.GetCurrentCredentialData(passID);
        
        if (typeOfCopy == 0) {
            await ClipboardService.CopyToClipboard(currentCredential.Username);
        }
        else {
            await ClipboardService.CopyToClipboard(currentCredential.Password);
        }

        await _credentialLogService.encryptCredential(currentCredential);
    }

    //This will display the delete warning box when the button delete is pressed.
    private async Task ModalBoxToMessageUserOpen(int passID) {
        
        var getCurrentPassID = await _credentialLogService.GetCurrentCredentialData(passID);
        listOfErrorPrompts = _credentialLogMessenger.ItemWarnings("DeleteWarning");
        id = passID;
        ModalBoxToMessageUser = true;
       
        StateHasChanged();
    }

}