<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
            </div>
            <div class="modal-body">
                <ul style = "color:red;">
                @foreach(var val in ListOfTextErrors)
                {   
                   <li>@val</li>
                }
                </ul>
            </div>
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case ModalDialogType.Ok:
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case ModalDialogType.OkCancel:
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case ModalDialogType.DeleteCancel:
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <Button @ref="saveButton" Color="ButtonColor.Danger" @onclick="async () => await ModalOk()">Delete</Button>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; } = null!;

    [Parameter]
    public List<string> ListOfTextErrors { get; set; } = null!;

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public ModalDialogType DialogType { get; set; }
    private Button saveButton = new Button();

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task ModalOk()
    {
        
        saveButton?.ShowLoading("Deleting credential...");

        await Task.Delay(1000); // API call

        await OnClose.InvokeAsync(true);
    }

    public enum ModalDialogType
    {
        Ok,
        OkCancel,
        DeleteCancel
    }
}