@layout NoMenuLayout
@using CodeCrateData
@inject UserAccountService _userAccountService
@inject NavigationManager NavManager
@inject ActiveLogService _activeLogService

<PageTitle>Register</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10, 10, 10, 0.884); " aria-modal="true" role="dialog" >
            <div class="modal-dialog">
                <div class="modal-content" style = "width: 100%;">
                    <div class="modal-header">
                        <h4 class="modal-title">Register Account</h4>
                        <button class="btn btn-dark" @onclick="CancelEvent">Close</button>
                    </div>

                        <div class="modal-body">
                            <EditForm Model="@userAccount">
                            <DataAnnotationsValidator />
                            <div class="col-md-7 col-lg-5 offset-xl " style="width: 100%;" >
                                <div class="form-group">
                                    <ValidationMessage For="@(()=> userAccount.Username)" />
                                    <InputText class="form-control" style = "width:100%;border:1px solid;" @bind-Value="userAccount.Username"/>
                                    <label class="form-label" for="form1Example13">Username</label>
                                    
                                    
                                </div>

                                <!-- Password input -->
                                <div class="form-group">
                                    <ValidationMessage For="@(()=> userAccount.Password)" />
                                    <InputText type="password" class="form-control noWhite" style = "width:100%;border:1px solid;" @bind-Value="userAccount.Password"/>
                                    <label class="form-label" for="form1Example23">Password</label>
                                    
                                </div>
                                <div class="form-group">
                                    <ValidationMessage For="@(()=> userAccount.ConfirmPassword)" />
                                    <InputText type="password" class="form-control" style = "width:100%;border:1px solid;" @bind-Value="userAccount.ConfirmPassword"/>
                                    @if (userAccount.Password != userAccount.ConfirmPassword)
                                    {
                                        <label class="form-label" style="color:red;" for="form1Example23">Passwords do not much</label>
                                    }
                                    else {
                                        <label class="form-label" for="form1Example23">Confirm Password</label>
                                    }
                                
                                </div>

                                <div class="form-group">
                                    <ValidationMessage For="@(()=> userAccount.Email)" />
                                    <InputText class="form-control" style = "width:100%;border:1px solid;" @bind-Value="userAccount.Email"/>
                                    <label class="form-label" for="form1Example23">Email</label>
                                    
                                </div>

                                <div class="testsss">
                                <!-- Submit button -->
                                @if(showLoadingButton) {
                                    <li><Button Color="ButtonColor.Primary" Loading="true" LoadingText="Saving..." /></li>
                                }
                                else {
                                    @if (userAccount.Password == "" && userAccount.ConfirmPassword == "" || userAccount.Password != userAccount.ConfirmPassword)
                                {
                                    <li><button class="btn btn-primary" style="background-color: #1266f1;" disabled="true" href="/" @onclick="RegisterAccount" role="button">Register</button></li>
                                }
                                    else {
                                    <li><button class="btn btn-primary" style="background-color: #1266f1;" disabled="@(!context.Validate())" @onclick="RegisterAccount" role="button">Register</button></li>

                                }

                                }
                                    <li><button class="btn btn-primary" style="background-color: #1266f1;" @onclick="CancelEvent">Cancel</button></li>
                                    @if (displayLoginErrorMsg) {
                                            <label style="color: red; padding-left:10px;padding-bottom:10px">The username or email has already been used!</label>
                                        }
                                </div>
                            </div>
                            </EditForm>
                            
                            
                        </div>
                </div>
            </div>
        </div>
    </div>
</div>




@code 
{
    [Parameter] public EventCallback OnComplete { get; set; }
    [Parameter] public EventCallback displayMessage { get; set; }
    protected UserAccount userAccount = new();
    protected bool displayLoginErrorMsg = false;
    protected bool showLoadingButton = false;

    // This method will call that DuplicateCheck method to look for duplicates
    // If true you cannot register an account until you fix the duplicates
    protected async Task RegisterAccount() {
        var test = await _userAccountService.CheckAccountDuplicates(userAccount);
        if (test == true) {
            displayLoginErrorMsg = true; 
        }
        else {
            showLoadingButton = true;
            displayLoginErrorMsg = false;
            await _userAccountService.AddUserAccount(userAccount);
            await Task.Delay(2000);
            await CancelEvent();
            await displayMessage.InvokeAsync();
        }
        

    }
    // When the user clicks cancel, the "X", or register it will close out of the Modal
    // So this is basically a way to make sure the modal classes on event click.
    protected async Task CancelEvent()
    {   
        await OnComplete.InvokeAsync();
    }



}