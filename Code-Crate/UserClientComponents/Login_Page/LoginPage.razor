@page "/"

@inject NavigationManager NavManager
@using CodeCrateData
@inject UserAccountService _userAccountService
@inject ToastService _toastService

<PageTitle>Login</PageTitle>

 
<Toasts class="p-3" Messages="messages" Delay="5000" Placement="ToastsPlacement.TopCenter" />
<div class="container-fluid">
    <div class="row">
        <body style="background-color: #F5F5F4;">

            <LoginNavBar />
            <section>
                <div class="fade-in-text">
                    <h2 style="color: black; text-align:center;font-style: oblique">"Unlock Confidence, Safeguard Credentials with Code Crate!"</h2>
                </div>
                <div class="container py-5">
                    <div class="row d-flex align-items-center justify-content-center">
                    <div class="col-md-8 col-lg-7 col-xl-6">
                        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.svg"
                        class="img-fluid" id="mainImage" alt="Phone image">
                    </div>
                    
                    
                    <div class="col-md-7 col-lg-5 offset-xl-1 " style="width: 495px; background-color: #3f3d56; border-style: solid; border-radius: 25px; border-color: #1266f1;">
                        
                        <h1 style="text-align: center;">Login</h1>
                        
                        <EditForm Model="@userAccount">
                        
                        
                            <div class="form-outline mb-4" style="padding-left:10px;padding-right:30px">
                                
                                <InputText class="form-control" style = "width: 100%;border:1px solid;" @bind-Value="userAccount.Username"/>
                                <label class="form-label" for="form1Example13">Username</label>
                            

                            
                                
                                <InputText type="password" class="form-control" style = "width: 100%;border:1px solid;" @bind-Value="userAccount.Password"/>
                                <label class="form-label" for="form1Example23">Password</label>
                            </div>

            

                        <div class="d-flex justify-content-around align-items-center mb-4">
                            <!-- Checkbox -->
                            <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="form1Example3" checked />
                            <label class="form-check-label" for="form1Example3"> Remember me </label>
                            </div>
                            <a href="/">Forgot password?</a>
                            
                        </div>

                        <!-- Submit button -->
                        <div class="divButton" style="padding-bottom: 10px;">
                            <li><Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="checkUser">Sign In</Button></li>
                            <li><Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="displayRegisterModal">Register</Button></li>
                        </div>
                        <div>
                            @if (displayLoginErrorMsg) {
                                <label style="color: red; padding-left:10px;padding-bottom:10px">The username or password is incorrect</label>
                            }
                        </div>
                        </EditForm>
                    </div>
                    </div>
                </div>
                
            </section>
        </body>
    </div>
    <MainFooter />
</div>

@if (displayRegisterComponent) {
    <Code_Crate.UserClientComponents.Register_Modal.RegisterPage OnComplete="onRegisterComplete" displayMessage="displaySuccessMessage"/>
}




@code {

    protected UserAccount userAccount = new();
    List<ToastMessage> messages = new List<ToastMessage>();
    protected bool displayLoginErrorMsg = false;
    protected bool displayRegisterComponent = false;
    protected override async Task OnInitializedAsync() { 
        await _userAccountService.GetUserAccounts();
    }
    private async Task checkUser() {
        if (userAccount.Username != "" && userAccount.Password != "") {
            var verifyAccount = await _userAccountService.VerifyUserAccount(userAccount);
            if (verifyAccount == true) {
                var _userAccount = await _userAccountService.GetCurrentAccount(userAccount);
                NavManager.NavigateTo($"/MainDashboard/{_userAccount.UserID}");
            }
            else {
                displayLoginErrorMsg = true; 
            }
            
        }
        else {
            displayLoginErrorMsg = true;
        }
        
    }

    private void RegisterBtn() {
        NavManager.NavigateTo("/RegisterPage");
    }

    private void displayRegisterModal() {
        displayRegisterComponent = true;
    }

    private void onRegisterComplete() {
        displayRegisterComponent = false;
    }

    private void displaySuccessMessage() {
        ShowMessage(ToastType.Success);
    }

    private void ShowMessage(ToastType toastType) {
        messages.Add(CreateToastMessage(toastType));
    }

    private ToastMessage CreateToastMessage(ToastType toastType)
    
        {
            ToastMessage toastMessage = new ToastMessage();

            toastMessage.Type = toastType;
            toastMessage.Title = "Success!";
            toastMessage.Message = $"Your account has been added to our systems! DateTime: {DateTime.Now}";
            toastMessage.AutoHide = !(toastType == ToastType.Danger || toastType == ToastType.Warning);

            return toastMessage;
        }
    



}